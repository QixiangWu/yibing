pragma solidity >=0.4.22 <0.6.0;

contract Donation {
    
    struct funder {
        address funderAddress;
        uint tomoney;
    }
    
    struct needer {
        address neederAddress;
        uint goal;
        string reasons;
        uint amount;
        uint funderNumber;
        mapping(uint => funder) fundermap;
    }
    uint8 neederNumber;
    mapping(uint8 => needer) needermap;
    function newNeeder(address _needAddress,uint _goal,string memory _reasons) public {
        neederNumber++;
        _goal = _goal * 1 ether;
        needermap[neederNumber] = needer(_needAddress,_goal,_reasons,0,0);  
    }

    function getNeederNumber() public view returns(uint8) {
        return neederNumber;
    }

    function contribute(uint8 _neederNumber) payable public{
        needer storage _needer = needermap[_neederNumber];
        _needer.amount += msg.value;
        _needer.funderNumber++;
        _needer.fundermap[_needer.funderNumber] = funder(msg.sender,msg.value);
    }
    
    function isComplete(uint8 _neederNumber) payable public {
        needer storage _needer = needermap[_neederNumber];
        if(_needer.amount >= _needer.goal) {
            uint amount = _needer.amount;
            _needer.amount = 0;
            address(uint160(_needer.neederAddress)).transfer(amount);           
        }
    }

    function neederAmt(uint8 _neederNumber) public view returns(uint){
        needer storage _needer = needermap[_neederNumber];
        return _needer.amount / 1 ether;
    }

    function getNeederGoal(uint8 _neederNumber) public view returns(uint){
        needer storage _needer = needermap[_neederNumber];
        return _needer.goal / 1 ether;
    }

}
